/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: FREEBAYES {
        ext.args = "--min-mapping-quality ${params.min_mapping_quality} --min-base-quality ${params.min_base_quality} --min-coverage ${params.min_coverage}"
        publishDir = [
            path: { "${params.outdir}/ploidy_evaluation" },
            mode: params.publish_dir_mode,
            pattern: "*.{vcf,vcf.gz}"
        ]
        label = 'process_medium'
    }

    withName: VCFTOOLS {
        ext.args = "--minDP ${params.min_depth} --minQ ${params.min_quality}"
        publishDir = [
            path: { "${params.outdir}/ploidy_evaluation" },
            mode: params.publish_dir_mode,
            pattern: "*.{vcf,vcf.gz,log}"
        ]
        label = 'process_low'
    }

    withName: INFERNAL {
        ext.args = "--cut_ga --rfam --nohmmonly --cut_nc ${params.evalue_threshold}"
        publishDir = [
            path: { "${params.outdir}/rna_families" },
            mode: params.publish_dir_mode,
            pattern: "*.{tblout,txt}"
        ]
        label = 'process_high'
    }

    withName: EDTA {
        ext.args = "--species ${params.edta_species} --step all --cds"
        publishDir = [
            path: { "${params.outdir}/repeats" },
            mode: params.publish_dir_mode,
            pattern: "*.{fa,gff3,out,mod}"
        ]
        label = 'process_high_memory'
    }

    withName: ASGART {
        ext.args = "-g ${params.gap_size} -ml ${params.min_sequence_length}"
        publishDir = [
            path: { "${params.outdir}/segmental_duplications" },
            mode: params.publish_dir_mode,
            pattern: "*.{txt,gff}"
        ]
        label = 'process_medium'
    }

    withName: BEDTOOLS_INTERSECT {
        ext.args = "-f ${params.min_overlap}"
        publishDir = [
            path: { "${params.outdir}/segmental_duplications" },
            mode: params.publish_dir_mode,
            pattern: "*.bed"
        ]
        label = 'process_low'
    }

    withName: STAR_GENOMEGENERATE {
        ext.args = "--sjdbOverhang ${params.star_sjdboverhang}"
        publishDir = [
            path: { "${params.outdir}/transcriptome/star_index" },
            mode: params.publish_dir_mode,
            pattern: "star"
        ]
        label = 'process_high'
    }

    withName: STAR_ALIGN {
        ext.args = "--outSAMtype BAM SortedByCoordinate --twopassMode Basic --alignIntronMax ${params.max_intron_length}"
        publishDir = [
            path: { "${params.outdir}/transcriptome/alignments" },
            mode: params.publish_dir_mode,
            pattern: "*.{bam,bai,log.final.out,log.out,tab}"
        ]
        label = 'process_high'
    }

    withName: TRINITY {
        ext.args = "--genome_guided_max_intron ${params.max_intron_length} --jaccard_clip --full_cleanup --CPU ${params.trinity_cpu} --max_memory ${params.trinity_max_memory}"
        publishDir = [
            path: { "${params.outdir}/transcriptome" },
            mode: params.publish_dir_mode,
            pattern: "*.{fasta,trinity_stats}"
        ]
        label = 'process_high_memory'
    }

    withName: CDHIT_EST {
        ext.args = "-c ${params.cdhit_identity} -g ${params.cdhit_global}"
        publishDir = [
            path: { "${params.outdir}/transcriptome" },
            mode: params.publish_dir_mode,
            pattern: "*.{fasta,clstr}"
        ]
        label = 'process_medium'
    }

    withName: TRANSDECODER_LONGORFS {
        ext.args = "-m ${params.min_protein_length}"
        publishDir = [
            path: { "${params.outdir}/annotation/transdecoder" },
            mode: params.publish_dir_mode,
            pattern: "*.{pep,cds,gff3,bed}"
        ]
        label = 'process_medium'
    }

    withName: DIAMOND_BLAST {
        ext.args = "--evalue ${params.diamond_evalue} --max-target-seqs ${params.diamond_max_target_seqs}"
        publishDir = [
            path: { "${params.outdir}/annotation/diamond" },
            mode: params.publish_dir_mode,
            pattern: "*.{txt,xml}"
        ]
        label = 'process_high'
    }

    withName: TRANSDECODER_PREDICT {
        publishDir = [
            path: { "${params.outdir}/annotation/transdecoder" },
            mode: params.publish_dir_mode,
            pattern: "*.{pep,cds,gff3,bed}"
        ]
        label = 'process_medium'
    }

    withName: BRAKER2 {
        ext.args = "--species=${params.braker_species} --gff3 --cores=${task.cpus}"
        publishDir = [
            path: { "${params.outdir}/annotation/braker2" },
            mode: params.publish_dir_mode,
            pattern: "*.{gff3,gtf,aa,codingseq}"
        ]
        label = 'process_high_memory'
    }

    withName: EXONERATE {
        ext.args = "--model protein2genome --bestn 1"
        publishDir = [
            path: { "${params.outdir}/annotation/exonerate" },
            mode: params.publish_dir_mode,
            pattern: "*.gff"
        ]
        label = 'process_medium'
    }

    withName: GENEMARK {
        ext.args = "--ES --fungus"
        publishDir = [
            path: { "${params.outdir}/annotation/genemark" },
            mode: params.publish_dir_mode,
            pattern: "*.{gtf,gff}"
        ]
        label = 'process_high'
    }

    withName: MAKER2 {
        ext.args = "-cpus ${params.maker_cpus}"
        publishDir = [
            path: { "${params.outdir}/annotation/maker2" },
            mode: params.publish_dir_mode,
            pattern: "*.{gff,fasta}"
        ]
        label = 'process_high_memory'
    }

    withName: BUSCO {
        ext.args = "--mode ${params.busco_mode} --cpu ${task.cpus}"
        publishDir = [
            path: { "${params.outdir}/annotation/busco" },
            mode: params.publish_dir_mode,
            pattern: "*"
        ]
        label = 'process_medium'
    }

    withName: PANNZER2 {
        publishDir = [
            path: { "${params.outdir}/functional_annotation" },
            mode: params.publish_dir_mode,
            pattern: "*.{txt,tsv}"
        ]
        label = 'process_low'
    }

    withName: KAAS {
        publishDir = [
            path: { "${params.outdir}/functional_annotation" },
            mode: params.publish_dir_mode,
            pattern: "*.{txt,ko}"
        ]
        label = 'process_low'
    }

    withName: MINIMAP2 {
        ext.args = "-ax ${params.minimap_preset}"
        publishDir = [
            path: { "${params.outdir}/methylation" },
            mode: params.publish_dir_mode,
            pattern: "*.{bam,bai}"
        ]
        label = 'process_high'
    }

    withName: MODKIT {
        ext.args = "--filter-threshold ${params.modkit_percentile} --min-coverage ${params.modkit_min_coverage}"
        publishDir = [
            path: { "${params.outdir}/methylation" },
            mode: params.publish_dir_mode,
            pattern: "*.{bam,bed,tsv}"
        ]
        label = 'process_medium'
    }

    withName: MBTOOLS {
        ext.args = "--cpg"
        publishDir = [
            path: { "${params.outdir}/methylation" },
            mode: params.publish_dir_mode,
            pattern: "*.{txt,tsv}"
        ]
        label = 'process_low'
    }

    withName: RAXMLNG {
        ext.args = "--model ${params.raxmlng_model} --bootstrap ${params.raxmlng_bootstrap}"
        publishDir = [
            path: { "${params.outdir}/phylogenomics" },
            mode: params.publish_dir_mode,
            pattern: "*.{newick,log}"
        ]
        label = 'process_high'
    }
}