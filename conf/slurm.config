/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Nextflow config file for running on SLURM HPC systems
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Configuration for SLURM job scheduler with Singularity containers
----------------------------------------------------------------------------------------
*/

params {
    config_profile_name        = 'SLURM HPC profile'
    config_profile_description = 'Configuration for SLURM-based HPC systems with Singularity'
}

process {
    executor = 'slurm'
    
    // Default SLURM settings
    queue = 'normal'
    clusterOptions = '--mail-type=FAIL'
    
    // Container settings
    container = 'library://nfcore/base:1.0'
    
    // Default resource allocation
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }
    
    // Error handling
    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 2
    maxErrors     = '-1'
    
    // Module loading (uncomment and modify if your HPC uses modules)
    // beforeScript = 'module load singularity/3.8.0'

    // Process-specific resource requirements for HPC
    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
        queue  = 'short'
    }
    
    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
        queue  = 'normal'
    }
    
    withLabel:process_medium {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
        queue  = 'normal'
    }
    
    withLabel:process_high {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
        queue  = 'normal'
        clusterOptions = '--mail-type=FAIL --exclusive'
    }
    
    withLabel:process_long {
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
        queue  = 'long'
    }
    
    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
        queue  = 'highmem'
        time   = { check_max( 48.h   * task.attempt, 'time'   ) }
        clusterOptions = '--mail-type=FAIL --exclusive'
    }

    // Specific configurations for computationally intensive processes
    withName:EDTA {
        cpus   = { check_max( 16    * task.attempt, 'cpus'    ) }
        memory = { check_max( 128.GB * task.attempt, 'memory' ) }
        time   = { check_max( 48.h   * task.attempt, 'time'   ) }
        queue  = 'highmem'
        clusterOptions = '--mail-type=FAIL --exclusive --partition=highmem'
    }

    withName:TRINITY {
        cpus   = { check_max( 16    * task.attempt, 'cpus'    ) }
        memory = { check_max( 100.GB * task.attempt, 'memory' ) }
        time   = { check_max( 24.h   * task.attempt, 'time'   ) }
        queue  = 'highmem'
        clusterOptions = '--mail-type=FAIL --exclusive --partition=highmem'
    }

    withName:BRAKER2 {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time   = { check_max( 24.h   * task.attempt, 'time'   ) }
        queue  = 'normal'
        clusterOptions = '--mail-type=FAIL --exclusive'
    }

    withName:MAKER2 {
        cpus   = { check_max( 16    * task.attempt, 'cpus'    ) }
        memory = { check_max( 128.GB * task.attempt, 'memory' ) }
        time   = { check_max( 48.h   * task.attempt, 'time'   ) }
        queue  = 'highmem'
        clusterOptions = '--mail-type=FAIL --exclusive --partition=highmem'
    }

    withName:STAR_GENOMEGENERATE {
        cpus   = { check_max( 8     * task.attempt, 'cpus'    ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time   = { check_max( 8.h   * task.attempt, 'time'   ) }
        queue  = 'normal'
    }

    withName:STAR_ALIGN {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 48.GB * task.attempt, 'memory' ) }
        time   = { check_max( 12.h  * task.attempt, 'time'   ) }
        queue  = 'normal'
    }

    withName:DIAMOND_BLAST {
        cpus   = { check_max( 16    * task.attempt, 'cpus'    ) }
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        time   = { check_max( 8.h   * task.attempt, 'time'   ) }
        queue  = 'normal'
    }

    withName:BUSCO {
        cpus   = { check_max( 8     * task.attempt, 'cpus'    ) }
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        time   = { check_max( 12.h  * task.attempt, 'time'   ) }
        queue  = 'normal'
    }

    withName:RAXMLNG {
        cpus   = { check_max( 16    * task.attempt, 'cpus'    ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time   = { check_max( 24.h  * task.attempt, 'time'   ) }
        queue  = 'normal'
        clusterOptions = '--mail-type=FAIL --exclusive'
    }

    withName:MINIMAP2 {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 48.GB * task.attempt, 'memory' ) }
        time   = { check_max( 8.h   * task.attempt, 'time'   ) }
        queue  = 'normal'
    }

    withName:INFERNAL {
        cpus   = { check_max( 8     * task.attempt, 'cpus'    ) }
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        time   = { check_max( 12.h  * task.attempt, 'time'   ) }
        queue  = 'normal'
    }
}