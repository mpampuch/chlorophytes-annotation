/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/chlorophytes-annotation Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Input options
    genome_fasta            = null
    illumina_reads          = null
    nanopore_reads          = null
    rna_reads               = null
    protein_db              = null
    rfam_db                 = null
    tpseudnana_cds          = null
    reference_genomes       = null

    // Output options
    outdir                  = './results'
    publish_dir_mode        = 'copy'

    // Freebayes options
    min_mapping_quality     = 30
    min_base_quality        = 30
    min_coverage            = 4

    // VCFtools options
    min_depth               = 10
    min_quality             = 10

    // Infernal options
    evalue_threshold        = 0.01

    // EDTA options
    edta_species            = 'others'

    // Asgart options
    gap_size                = 3000
    min_sequence_length     = 5000
    min_identity_rate       = 0.9

    // BEDTools options
    min_overlap             = 0.1

    // STAR options
    star_sjdboverhang       = 99
    max_intron_length       = 100000

    // Trinity options
    trinity_max_memory      = '50G'
    trinity_cpu             = 16

    // CD-HIT-EST options
    cdhit_identity          = 0.95
    cdhit_global            = 1

    // TransDecoder options
    min_protein_length      = 20

    // DIAMOND BLAST options
    diamond_evalue          = 1e-5
    diamond_max_target_seqs = 1

    // Braker2 options
    braker_species          = 'generic'

    // MAKER2 options
    maker_cpus              = 8

    // BUSCO options
    busco_lineage_eukaryota = 'eukaryota_odb10'
    busco_lineage_stramenopiles = 'stramenopiles_odb10'
    busco_mode              = 'genome'

    // PANNZER2 options
    pannzer_min_query_coverage = 0.4
    pannzer_min_subject_coverage = 0.4
    pannzer_min_alignment_length = 50

    // KAAS options
    kaas_organisms          = 'cre,bmi,pti,fcy,tps,ath,olu,mpu'

    // Minimap2 options
    minimap_preset          = 'map-ont'

    // Modkit options
    modkit_percentile       = 10
    modkit_min_coverage     = 1

    // RAxML-NG options
    raxmlng_model           = 'LG+G4'
    raxmlng_bootstrap       = 100

    // Resource options
    max_memory              = '128.GB'
    max_cpus                = 16
    max_time                = '240.h'

    // MultiQC options
    multiqc_config          = null
    multiqc_title           = null
    multiqc_logo            = null
    max_multiqc_email_size  = '25.MB'

    // Boilerplate options
    help                    = false
    version                 = false
    validate_params         = true
    show_hidden_params      = false
    schema_ignore_params    = 'genomes'

    // Config options
    custom_config_version   = 'master'
    custom_config_base      = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_name     = null
    config_profile_description = null
    config_profile_contact  = null
    config_profile_url      = null

    // Email options
    email                   = null
    email_on_fail           = null
    plaintext_email         = false
    monochrome_logs         = false
    hook_url                = null

    // Execution options
    tracedir                = "${params.outdir}/pipeline_info"
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load modules.config
includeConfig 'conf/modules.config'

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    mamba {
        conda.enabled          = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }
    gitpod {
        executor.name          = 'local'
        executor.cpus          = 16
        executor.memory        = 60.GB
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apptainer.org/docs/user/main/appendix.html#unsafe-env-vars for details.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'nf-core/chlorophytes-annotation'
    author          = """Your Name"""
    homePage        = 'https://github.com/nf-core/chlorophytes-annotation'
    description     = """Comprehensive chlorophytes genome annotation pipeline"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.10.1'
    version         = '1.0dev'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}